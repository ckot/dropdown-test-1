{"version":3,"sources":["contexts/ScenarioContext.js","components/icons/CheckBoxIcon.js","components/icons/CheckmarkIcon.js","components/icons/ChevronIcon.js","components/icons/DoneIcon.js","components/forms/FormUtils.js","routes/ProofOfConcept.js","components/Menus.js","routes/MultipleMenus.js","routes/MenuPair.js","App.js","reportWebVitals.js","index.js"],"names":["ScenarioContext","React","createContext","ScenarioProvider","scenario","defaultValues","children","useState","checkListItems","setCheckListItems","showForm","showInterventionForm","setShowInterventionForm","currentInterventionForm","setCurrentInterventionForm","collapsed","setCollapsed","setCollapsedValue","id","boolVal","prevState","getCollapsed","isChecked","setChecked","newValue","Date","now","someChecked","ids","result","some","console","log","allChecked","every","setDisplayInterventionForm","Provider","value","toggleChecked","shouldDisplayInterventionForm","Object","keys","includes","toggleDisplayInterventionForm","toggleCollapsed","buildDepListFromCheckListItemIDs","map","setDerivedCheckListItemValue","depChecker","deps","currVal","newVal","CheckBoxIcon","checked","className","CheckmarkIcon","uncheckedClassname","classnames","ChevronIcon","expand","DoneIcon","NestedForm","label","checkedWhen","useContext","depIDs","useMemo","child","depList","useCallback","useEffect","onClick","Collapse","isOpen","item","DerivedValue","FormCheckBox","clickHandler","SelectOne","onChange","event","selected","target","filter","dep","forEach","SelectOneOrMore","IntvFormItem","type","prompt","IntvForm","data","rec","ProofOfConcept","showDropDown","setShowDropDown","handleSimpleInterventionSelection","handleInterventionFormSelection","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","header","interventionForms","AIRWAY_MENU_ITEMS","BREATHING_MENU_ITEMS","CIRCULATION_MENU_ITEMS","OTHER_MGMT_ACTIONS_MENU_ITEMS","ONGOING_MGMT_PLANS_MENU_ITEMS","Menu","show","setShow","opt","depth","MultipleMenus","INTV_CAT_MENU_ITEMS","MenuPair","currIntvCategory","setCurrIntvCategory","handleSelectIntv","preventDefault","category","error","getIntvMenu","App","scenarioData","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb74cd35.chunk.js","sourcesContent":["import React, {\n    useState,\n    // useEffect,\n    // useContext\n} from \"react\"\n\n// import { db } from \"@meddbriefer/mdb-firebase\"\n\n// import { AuthContext } from '@meddbriefer/mdb-auth'\n\nexport const ScenarioContext = React.createContext()\n\nexport const ScenarioProvider = ({scenario, defaultValues, children}) =>{\n\n    // const { currentUser, getUserData, isAuthenticated, saveUserData } = useContext(AuthContext)\n    // const [currentNode, setCurrentNode] = useState(defaultValues.currentNode)\n    // const [currentAssessmentFinding, setCurrentAssessmentFinding] = useState(null)\n    const [checkListItems, setCheckListItems] = useState(defaultValues.checkListItems)\n    // const [criticalCriteria, setCriticalCriteria] = useState(defaultValues.criticalCriteria)\n    const [showInterventionForm, setShowInterventionForm] = useState(defaultValues.showForm)\n    // const [currentVitals, setCurrentVitals] = useState(defaultValues.vitals)\n    // const [vitalsRecomputed, setVitalsRecomputed] = useState(defaultValues.vitalsRecomputed)\n    const [currentInterventionForm, setCurrentInterventionForm] = useState(null)\n\n    // const [started, setStarted] = useState(false)\n    // const [paused, setPaused] = useState(false)\n    // const [timestamp, setTimestamp] = useState(0)\n    // const [timers, setTimers] = useState([{id: 'scenario', duration: scenario.info.maxTime * 60, action:{type: \"timeExpired\", payload: \"time expired\"}, timeRemaining: scenario.info.maxTime * 60, expired: false}])\n    // const [timerError, setTimerError] = useState(null)\n    // const [actionsQueue, setActionsQueue] = useState([])\n\n    const [collapsed, setCollapsed] = useState({});\n\n    // const [showScenarioComplete, setShowScenarioComplete] = useState(false)\n\n    // expose accesor rather than timestamp, in effect making it a private variable\n    // const getTimestamp = () => timestamp\n    const getTimestamp = () => Date.now()\n    // const clearTimerError = () => setTimerError(null)\n\n    // useEffect(() => {\n    //   const interval = setInterval(() => tick(), 1000)\n    //   // cleanup interval\n    //   return () => {\n    //     clearInterval(interval)\n    //   }\n    // })\n\n    // useEffect(() => {\n    //     if (Object.keys(actionsQueue).length !== 0) {\n    //         let currActionString = actionsQueue[0].type;\n    //         let currActionPayload = actionsQueue[0].payload;\n    //         let currAction = ACTIONS[currActionString];\n\n    //         currAction(currActionPayload);\n    //     }\n    // }, [actionsQueue])\n\n    // Save scenario state\n    // useEffect(\n    //     () => {\n    //         // as both class components .setState() and functional components useState() setters\n    //         // both actually queue the setting of state, as an performance optimization for when\n    //         // there are individual requests for state changes made in a relatively short period\n    //         // of time,  making use of a useEffect() with a dependency array of all state variables\n    //         // we're interested in persisting to the db is a perfect place to capture when they\n    //         // have actually been changed, and thus persist those changes.  since we're not hooked\n    //         // up to the db yet, I'm merely console.log()ing that things have changed, and listing\n    //         // what state we'll be persisting to the db.\n    //         saveUserData(scenario.id, {\n    //             currentAssessmentFinding,\n    //             checkListItems,\n    //             criticalCriteria,\n    //             showInterventionForm,\n    //             currentVitals,\n    //             vitalsRecomputed\n    //         });\n    //     },\n    //     [\n    //         currentAssessmentFinding,\n    //         checkListItems,\n    //         criticalCriteria,\n    //         showInterventionForm,\n    //         currentVitals,\n    //         vitalsRecomputed\n    //     ]\n    // )\n\n    // Load and apply scenario state\n    // useEffect(() => {\n    //     // isAuthenticated &&\n    //     getUserData()\n    //         .then(res => {\n    //             let state = res[scenario.id];\n\n    //             // Set all states\n    //             setCurrentAssessmentFinding(state.currentAssessmentFinding);\n    //             setCheckListItems(state.checkListItems);\n    //             setCriticalCriteria(state.criticalCriteria);\n    //             setShowInterventionForm(state.showInterventionForm);\n    //             setCurrentVitals(state.currentVitals);\n    //             setVitalsRecomputed(state.vitalsRecomputed);\n    //         })\n    //         .catch(err => console.log(err));\n    // }, []);\n\n    // const tick = () => {\n    //     if (started && !paused) {\n    //         setTimestamp(timestamp + 1);  // Increase the timestamp by 1 if the timers have been started and are not paused\n    //         const newTimers = timers.map((timer) => {\n    //             const newTimer = Object.assign(timer)\n    //             if (!timer.expired) {\n    //                 if (timer.timeRemaining === 1) {\n    //                     newTimer.expired = true\n    //                     if (newTimer.action != null) {  // != instead of !== is intentional\n    //                         const newActionsQueue = actionsQueue.slice();\n    //                         newActionsQueue.push(newTimer.action);\n    //                         setActionsQueue(newActionsQueue);\n    //                     }\n    //                 }\n    //                 newTimer.timeRemaining--\n    //             }\n    //             return newTimer\n    //         })\n    //         setTimers(newTimers)\n    //     }\n    // }\n\n    // const registerTimer = (id, duration, action = null, timeRemaining = null, expired = false) => {\n    //     timeRemaining = timeRemaining ?? duration\n    //     const found = timers.find((timer) => timer.id === id)\n    //     if (found) {\n    //         setTimerError(`ERROR: timer: \"${id}\" already registered`)\n    //     } else {\n    //         const newTimers = timers.slice()\n    //         newTimers.push({ id, duration, action, timeRemaining, expired })\n    //         setTimers(newTimers)\n    //     }\n    // }\n\n    // const cancelTimer = (id) => {\n    //     const found = timers.find((timer) => timer.id === id);\n    //     if (found) {\n    //         let newTimers = timers.filter(timer => timer.id != id);  // Returns an array with everything except the removed timer\n    //         setTimers(newTimers);\n    //     } else {\n    //         setTimerError(`ERROR: timer: \"${id}\" not found`)\n    //     }\n    // }\n\n    // // Actions begin\n    // const timeExpired = (payload) => {\n    //     // alert(payload);\n    //     console.log(payload)\n    // }\n\n    // const bar = () => {\n    //     alert(\"bar\");\n    // }\n\n    // const ACTIONS = {\n    //     \"timeExpired\": timeExpired,\n    //     \"bar\": bar\n    // }\n    // // Actions end\n\n\n    const setCollapsedValue = (id, boolVal) => {\n        setCollapsed(prevState => ({\n            ...prevState, [id]: boolVal\n        }))\n    }\n\n    const toggleCollapsed = (id) => {\n        setCollapsedValue(id, !getCollapsed(id));\n    }\n\n    const getCollapsed = (id) => {\n        return collapsed[id];\n    }\n\n    const isChecked = (id) => {\n        return !!checkListItems[id]\n    }\n\n    const setChecked = (id, boolVal) => {\n        const newValue = boolVal ? getTimestamp() : false\n        setCheckListItems(prevState => ({\n            ...prevState, [id]: newValue\n        }))\n    }\n\n    const toggleChecked = (id) => {\n        setChecked(id, !isChecked(id))\n    }\n\n    const someChecked = (ids) => {\n        const result = ids.some(id => isChecked(id))\n        console.log(`someChecked(${ids}): ${result}`)\n        return result\n    }\n\n    const allChecked = (ids) => {\n        const result = ids.every(id => isChecked(id))\n        console.log(`allChecked(${ids}): ${result}`)\n        return result\n    }\n\n    // const isCurrentAssessmentFinding = (id) => {\n    //     return !!currentAssessmentFinding && currentAssessmentFinding === id\n    // }\n\n    // const toggleAssessmentFinding = (id) => {\n    //     const stepIsChecked = isChecked(id)\n    //     setCurrentAssessmentFinding(!stepIsChecked ? id : null)\n    //     toggleChecked(id)\n    // }\n\n    const shouldDisplayInterventionForm = (id) => {\n        return Object.keys(showInterventionForm).includes(id) && showInterventionForm[id]\n    }\n\n    const setDisplayInterventionForm = (id, boolVal) => {\n        setShowInterventionForm(prevState => ({\n            ...prevState, [id]: boolVal\n        }))\n    }\n\n    const toggleDisplayInterventionForm = (id) => {\n        setDisplayInterventionForm(id, !showInterventionForm[id])\n    }\n\n    // const setVital = (vital, value) => {\n    //     setCurrentVitals(prevState => ({\n    //         ...prevState, [vital]: value\n    //     }))\n    // }\n\n    // const saveScenarioToLog = (label = \"\") => {\n    //     const docRef = db.collection(\"logs\").doc()\n    //     let data = {\n    //         userName: currentUser.email,\n    //         scenario: scenario.id,\n    //         label: label,\n    //         timestamp: Date().toLocaleString()\n    //     }\n    //     let idsAndTimestamps = []\n    //     Object.keys(checkListItems).forEach(id => {\n    //         if (isChecked(id)) {\n    //             const ts = checkListItems[id]\n    //             idsAndTimestamps.push({id: id, timestamp: ts})\n    //         }\n    //     });\n    //     idsAndTimestamps.sort((recA, recB) => recA.timestamp - recB.timestamp)\n    //     data[\"events\"] = idsAndTimestamps\n    //     // console.log(JSON.stringify(data, null, 4))\n    //     docRef.set(data)\n    // }\n\n    const buildDepListFromCheckListItemIDs = (ids) => ids.map(id => isChecked(id))\n\n    const setDerivedCheckListItemValue = (id, depChecker, deps) => {\n        const currVal = isChecked(id)\n        const newVal = (\"all\" === depChecker) ? allChecked(deps) : someChecked(deps)\n        // don't update checkListItems if we don't have an actual change\n        if (currVal !== newVal) {\n            console.log(`setDerivedCheckListItemValue(${id}, \"${depChecker}\", [${deps}]): ${newVal}`)\n            setChecked(id, newVal)\n        }\n    }\n\n    // const evalIDExpression = (exp) => {\n    //     exp = exp.replace(/AND/gi, ' && ')\n    //         .replace(/OR/gi, ' || ')\n    //         .replace(/NOT\\s*/gi, ' !');\n    //     const re = /[\\w][-\\w]*/gi;\n    //     const matches = exp.matchAll(re);\n    //     for (let match of matches) {\n    //         exp = isChecked(match)\n    //             ? exp.replace(match, 'true')\n    //             : exp.replace(match, 'false');\n    //     }\n    //     return eval(exp)\n    // }\n\n    return (\n        <ScenarioContext.Provider\n            value={{\n                scenario,\n                checkListItems,\n                isChecked,\n                setChecked,\n                toggleChecked,\n                someChecked,\n                allChecked,\n                // isCurrentAssessmentFinding,\n                // toggleAssessmentFinding,\n                shouldDisplayInterventionForm,\n                setDisplayInterventionForm,\n                currentInterventionForm,\n                setCurrentInterventionForm,\n                toggleDisplayInterventionForm,\n                // setCriticalCriteria,\n                // currentVitals,\n                // setVital,\n                // vitalsRecomputed,\n                // setVitalsRecomputed,\n                // started,\n                // setStarted,\n                // paused,\n                // setPaused,\n                // getTimestamp,\n                // timers,\n                // timerError,\n                // actionsQueue,\n                // registerTimer,\n                // cancelTimer,\n                // clearTimerError,\n                // setTimerError,\n                setCollapsedValue,\n                toggleCollapsed,\n                getCollapsed,\n                // showScenarioComplete,\n                // setShowScenarioComplete,\n                // saveScenarioToLog,\n                buildDepListFromCheckListItemIDs,\n                setDerivedCheckListItemValue\n            }}\n        >\n            {children}\n        </ScenarioContext.Provider>\n    )\n}","import React from \"react\"\n\nconst CheckBoxIcon = ({checked = false}) => {\n\n    return (\n        <span\n            className=\"checkbox-icon material-icons-outlined\"\n        >\n            {checked ? \"check_box\" : \"check_box_outline_blank\"}\n        </span>\n    )\n}\n\nexport default CheckBoxIcon","import React from \"react\"\n\nimport classnames from \"classnames\"\n\nconst CheckmarkIcon = ({checked, uncheckedClassname = \"invisible\"}) => {\n\n    return (\n        <span className={classnames(\"material-icons-outlined\", !checked ? uncheckedClassname : \"\")}>\n            check\n        </span>\n    )\n}\n\nexport default CheckmarkIcon\n\n\n","import React from \"react\"\n\nconst ChevronIcon = ({expand = false}) => {\n\n    return (\n        <span\n            className=\"chevron-icon material-icons-outlined\"\n        >\n            {expand ? \"arrow_drop_down  \" : \"arrow_right\"}\n        </span>\n\n    )\n}\n\nexport default ChevronIcon","import React from \"react\"\n\nimport classnames from \"classnames\"\n\nconst DoneIcon = ({ checked = false }) => {\n\n    return (\n        <span className={classnames(\"checkbox-icon\", \"material-icons-outlined\", { \"invisible\": !checked })}>\n            done_all\n        </span>\n    )\n}\n\nexport default DoneIcon","import React, {\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo\n} from \"react\"\n\nimport { Collapse } from 'reactstrap'\n\nimport {ScenarioContext} from \"../../contexts/ScenarioContext\"\n\nimport CheckBoxIcon from \"../icons/CheckBoxIcon\"\nimport CheckmarkIcon from \"../icons/CheckmarkIcon\"\nimport ChevronIcon from \"../icons/ChevronIcon\"\nimport DoneIcon from \"../icons/DoneIcon\"\n\n\nexport const NestedForm = ({id, label, checkedWhen = \"some\", children}) => {\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        isChecked,\n        setDerivedCheckListItemValue,\n        shouldDisplayInterventionForm,\n        toggleDisplayInterventionForm\n    } = useContext(ScenarioContext)\n    // eslint-disable-next-line\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    // eslint-disable-next-line\n    const depList = useCallback(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n\n    useEffect(\n        () => {setDerivedCheckListItemValue(id, checkedWhen, depIDs)},\n        // eslint-disable-next-line\n        [depList]\n    )\n\n    return (\n        <li>\n            <span onClick={() => toggleDisplayInterventionForm(id)}>\n                <CheckmarkIcon checked={isChecked(id)} />\n                {label}\n                <ChevronIcon expand={shouldDisplayInterventionForm(id)} />\n             </span>\n            <Collapse isOpen={shouldDisplayInterventionForm(id)} >\n                <ul>\n                {children.map(child =>\n                    <li key={child.id}><IntvFormItem item={child} /></li>\n                )}\n                </ul>\n            </Collapse>\n        </li>\n    )\n}\n\n\nexport const DerivedValue = ({id, checkedWhen, children}) => {\n\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        setDerivedCheckListItemValue\n    } = useContext(ScenarioContext)\n\n    // eslint-disable-next-line\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    // eslint-disable-next-line\n    const depList = useCallback(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n    // set the derived value on the initial render\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, checkedWhen, depIDs) },\n         // eslint-disable-next-line\n        []\n    )\n    // set the derived value when something changes\n    useEffect(\n        () => {setDerivedCheckListItemValue(id, checkedWhen, depIDs)},\n        // eslint-disable-next-line\n        [depList]\n    )\n\n    return (\n        <>\n            {children.map(child =>\n                <IntvFormItem item={child} />\n            )}\n        </>\n    )\n}\n\n\nexport const FormCheckBox = ({ id, label, clickHandler }) => {\n    const { isChecked } = useContext(ScenarioContext)\n\n    return (\n        <span onClick={() => clickHandler(id)}>\n            <CheckBoxIcon checked={isChecked(id)} />\n            <span>\n                {label}\n            </span>\n        </span>\n    )\n}\n\nexport const SelectOne = ({ id, label, children }) => {\n\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        isChecked,\n        setChecked,\n        setDerivedCheckListItemValue\n    } = useContext(ScenarioContext)\n    // eslint-disable-next-line\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    // eslint-disable-next-line\n    const depList = useCallback(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n    // set the derived value on initial render\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, \"some\", depIDs) },\n        // eslint-disable-next-line\n        []\n    )\n    // set the derived value when something changes\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, \"some\", depIDs) },\n        // eslint-disable-next-line\n        [depList]\n    )\n\n    const changeHandler = (event) => {\n        const selected = event.target.value\n        const notSelected = depIDs.filter(dep => dep !== selected)\n        notSelected.forEach(id => setChecked(id, false))\n        if (\"\" !== selected) {\n            setChecked(selected, true)\n        }\n    }\n\n    return (\n        <li>\n            <CheckmarkIcon checked={isChecked(id)} />\n            <i>{label}</i>\n            <ul>\n                <li>\n                    <select\n                        id={id}\n                        onChange={changeHandler}\n                        className=\"form-control\"\n                    >\n                        <option value=\"\">----</option>\n                        {children.map(child => (\n                            <option key={child.id} value={child.id} selected={isChecked(id)}>{child.label}</option>\n                        ))}\n                    </select>\n                </li>\n            </ul>\n        </li>\n    )\n}\n\nexport const SelectOneOrMore = ({id, label, checkedWhen, children}) => {\n\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        isChecked,\n        setDerivedCheckListItemValue\n    } = useContext(ScenarioContext)\n    // eslint-disable-next-line\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    // eslint-disable-next-line\n    const depList = useMemo(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n    // set the derived value on initial render\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, checkedWhen, depIDs) },\n        // eslint-disable-next-line\n        []\n    )\n    // set the derived value when something changes\n    useEffect(\n        () => {setDerivedCheckListItemValue(id, checkedWhen, depIDs)},\n        // eslint-disable-next-line\n        [...depList]\n    )\n\n    return (\n        <li>\n            <CheckmarkIcon checked={isChecked(id)} />\n            <i>{label}</i>\n            <ul>\n                {children.map((child) =>\n                    <li key={child.id}><IntvFormItem item={child} /></li>\n                )}\n            </ul>\n        </li>\n    )\n}\n\n\nexport const IntvFormItem = ({ item }) => {\n    // eslint-disable-next-line\n    const { toggleChecked, someChecked } = useContext(ScenarioContext)\n\n    switch (item.type) {\n        case \"select-one\":\n            return (\n                <SelectOne\n                    id={item.id}\n                    label={item.prompt}\n                    children={item.children}\n                />\n            )\n        case \"select-one-or-more\":\n            return (\n                <SelectOneOrMore\n                    id={item.id}\n                    label={item.prompt}\n                    checkedWhen={item.checkedWhen}\n                    children={item.children}\n                />\n            )\n        case \"derived-value\":\n            return (\n                <DerivedValue\n                    id={item.id}\n                    checkedWhen={item.checkedWhen}\n                    children={item.children}\n                />\n            )\n        case \"checkbox\":\n            return (\n                <FormCheckBox\n                    id={item.id}\n                    label={item.label}\n                    clickHandler={toggleChecked}\n                />\n            )\n        case \"nested-form\":\n            return (\n                <li>\n                    <NestedForm\n                        id={item.id}\n                        label={item.label}\n                        checkedWhen={item.checkedWhen || \"some\"}\n                        children={item.children}\n                    />\n                </li>\n            )\n        case \"prompt\":\n            return (<li><i>{item.label}</i></li>)\n        default:\n            return (<p>placeholder for unhandled item type</p>)\n    }\n}\n\nexport const IntvForm = ({ data }) => {\n    const {id, label, checkedWhen, children} = data\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        isChecked,\n        setDerivedCheckListItemValue\n    } = useContext(ScenarioContext)\n    // eslint-disable-next-line\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    // eslint-disable-next-line\n    const depList = useMemo(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n    // set derived value on initial render\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, checkedWhen, depIDs)},\n        // eslint-disable-next-line\n        []\n    )\n    // set derived value whenever something changes\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, checkedWhen, depIDs) },\n        // eslint-disable-next-line\n        [depList]\n    )\n\n    return (\n        <div>\n            <span className=\"h5\">\n                <DoneIcon checked={isChecked(id)} />\n                {label}\n            </span>\n            <hr className=\"minimal\"/>\n            <ul>\n                {children.map((rec) =>\n                    <IntvFormItem key={rec.id} item={rec} />\n                )}\n            </ul>\n        </div>\n    )\n}\n","import {\n    useContext,\n    useEffect,\n    useState\n} from \"react\"\n\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n} from \"reactstrap\"\n\nimport { ScenarioContext } from \"../contexts/ScenarioContext\"\n\nimport { IntvForm } from \"../components/forms/FormUtils\"\nimport CheckMarkIcon from \"../components/icons/CheckmarkIcon\"\n\nconst ProofOfConcept = () => {\n\n    const {\n        scenario,\n        currentInterventionForm,\n        isChecked,\n        setCurrentInterventionForm,\n        toggleChecked\n    } = useContext(ScenarioContext)\n    const [showDropDown, setShowDropDown] = useState(false)\n    const toggleDropDown = () => setShowDropDown(!showDropDown)\n\n    const handleSimpleInterventionSelection = (event) => {\n        setCurrentInterventionForm(null)\n        toggleChecked(event.target.id)\n    }\n\n    const handleInterventionFormSelection = (event) => {\n        setCurrentInterventionForm(event.target.id)\n    }\n\n    // set current intervention form to null on initial render\n    useEffect(\n        () => { setCurrentInterventionForm(null) },\n        //eslint-disable-next-line\n        []\n    )\n\n    return (\n        <>\n            <Dropdown\n                isOpen={showDropDown}\n                toggle={toggleDropDown}\n            >\n                <DropdownToggle caret>\n                    Select an item\n                </DropdownToggle>\n                <DropdownMenu>\n                    <DropdownItem\n                        id=\"item1\"\n                        onClick={handleSimpleInterventionSelection}\n                    >\n                        <CheckMarkIcon\n                            checked={isChecked(\"item1\")}\n                            uncheckedClassname=\"hidden\"\n                        />\n                        I'm a simply intervention with no prompts (no form)\n                    </DropdownItem>\n                    <DropdownItem\n                        id=\"intv-form-bls-airway-management\"\n                        onClick={handleInterventionFormSelection}\n                    >\n                        <CheckMarkIcon\n                            checked={isChecked(\"intv-bls-airway-management\")}\n                            uncheckedClassname=\"hidden\"\n                        />\n                        BLS Airway Management<b>...</b>\n                    </DropdownItem>\n                    <DropdownItem header>Sub heading</DropdownItem>\n                    <DropdownItem\n                        id=\"item2\"\n                        onClick={handleSimpleInterventionSelection}\n                    >\n                        <CheckMarkIcon\n                            checked={isChecked(\"item2\")}\n                            uncheckedClassname=\"hidden\"\n                        />\n                        Another simple intervention\n                    </DropdownItem>\n                    <DropdownItem\n                        id=\"intv-form-ventilation\"\n                        onClick={handleInterventionFormSelection}\n                    >\n                        <CheckMarkIcon\n                            checked={isChecked(\"intv-ventilation\")}\n                            uncheckedClassname=\"hidden\"\n                        />\n                        Ventilation<b>...</b>\n                    </DropdownItem>\n                </DropdownMenu>\n            </Dropdown>\n            <hr />\n            {!!currentInterventionForm &&\n                <IntvForm\n                    data={scenario.interventionForms[currentInterventionForm]}\n                />\n            }\n        </>\n    )\n}\n\nexport default ProofOfConcept","import React, {\n    // useContext,\n    useState\n} from \"react\"\n\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle\n} from \"reactstrap\"\n\nimport classnames from \"classnames\"\n\nexport const AIRWAY_MENU_ITEMS = [\n    {\n        \"id\": \"heading-bls\",\n        \"type\": \"heading\",\n        \"depth\": \"1\",\n        \"label\": \"BLS\"\n    },\n    {\n        \"id\": \"intv-form-bls-airway-management\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"BLS airway management\"\n    },\n    {\n        \"id\": \"intv-form-remove-foreign-objects\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"Remove foreign body obstructions\"\n    },\n    {\n        \"id\": \"intv-form-suction\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"Suction\"\n    },\n    {\n        \"id\": \"intv-form-crico\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"Cricothyrotomy\"\n    },\n    {\n        \"id\": \"heading-als\",\n        \"type\": \"heading\",\n        \"depth\": \"1\",\n        \"label\": \"ALS\"\n    },\n    {\n        \"id\": \"intv-form-als-airway-management\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"ALS airway management\"\n    }\n]\n\nexport const BREATHING_MENU_ITEMS = [\n    {\n        \"id\": \"intv-form-ventilation\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Ventilation\"\n    },\n    {\n        \"id\": \"intv-form-supplemental-oxygen\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Supplemental oxygen administration\"\n    },\n    {\n        \"id\": \"heading-manage-breathing-injury\",\n        \"type\": \"heading\",\n        \"depth\": \"1\",\n        \"label\": \"Manage Breathing-Compromising Injury\"\n    },\n    {\n        \"id\": \"intv-form-occlusive-dressing\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"Occlusive dressing\"\n    },\n    {\n        \"id\": \"intv-form-pleural-decompression\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"Pleural decompression\"\n    }\n]\n\nexport const CIRCULATION_MENU_ITEMS = [\n    {\n        \"id\": \"intv-form-severe-bleeding\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Severe bleeding\"\n    },\n    {\n        \"id\": \"intv-form-shock\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Shock\"\n    }\n]\n\nexport const OTHER_MGMT_ACTIONS_MENU_ITEMS = [\n    {\n        \"id\": \"intv-form-manage-secondary-injuries\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"Secondary wounds\"\n    },\n    {\n        \"id\": \"intv-form-spinal-motion-restriction\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"Spinal motion restriction\"\n    },\n    {\n        \"id\": \"intv-form-transport-decisions\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"2\",\n        \"label\": \"Transport decisions\"\n    }\n]\n\nexport const ONGOING_MGMT_PLANS_MENU_ITEMS = [\n    {\n        \"id\": \"intv-form-transfers-patient\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Transfers patient to ambulance as needed\"\n    },\n    {\n        \"id\": \"intv-form-reassess-vital-signs\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Reassesses vital signs\"\n    },\n    {\n        \"id\": \"intv-form-reassess-modify-interventions\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Checks and modifies interventions as needed\"\n    },\n    {\n        \"id\": \"intv-form-administer-additional-interventions\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Administers additional interventions as needed\"\n    }\n]\n\nexport const Menu = ({label, clickHandler, children}) => {\n    const [show, setShow] = useState(false)\n    const toggleShow = () => setShow(!show)\n\n    return (\n        <Dropdown\n            isOpen={show}\n            toggle={toggleShow}\n            className=\"dropdown\"\n        >\n            <DropdownToggle caret>\n                {label}\n            </DropdownToggle>\n            <DropdownMenu>\n                {children.map((opt) =>\n                    <DropdownItem\n                        key={opt.id}\n                        id={opt.id}\n                        className={\n                            classnames({\n                                \"dropdown-header\": \"heading\" === opt.type,\n                                \"dropdown-form\": \"heading\" !== opt.type\n                            },\n                                `dropdown-depth=${opt.depth}`\n                            )}\n                        header={opt.type === \"heading\"}\n                        onClick={clickHandler}\n                    >\n                        {opt.label}\n                    </DropdownItem>\n                )}\n            </DropdownMenu>\n        </Dropdown>\n    )\n}","import React, {\n    useContext,\n    useEffect\n} from \"react\"\n\n// import classnames from \"classnames\"\n\nimport { ScenarioContext } from \"../contexts/ScenarioContext\"\n\n\nimport { IntvForm } from \"../components/forms/FormUtils\"\n\nimport {\n    AIRWAY_MENU_ITEMS,\n    BREATHING_MENU_ITEMS,\n    CIRCULATION_MENU_ITEMS,\n    OTHER_MGMT_ACTIONS_MENU_ITEMS,\n    ONGOING_MGMT_PLANS_MENU_ITEMS,\n    Menu\n} from \"../components/Menus\"\n\nconst MultipleMenus = () => {\n    const {\n        currentInterventionForm,\n        scenario,\n        setCurrentInterventionForm\n    } = useContext(ScenarioContext)\n\n    const handleInterventionFormSelection = (event) => setCurrentInterventionForm(event.target.id)\n\n    // set current intervention form to null on initial render\n    useEffect(\n        () => { setCurrentInterventionForm(null) },\n        //eslint-disable-next-line\n        []\n    )\n\n    return (\n        <>\n            <Menu\n                label=\"Airway\"\n                clickHandler={handleInterventionFormSelection}\n                children={AIRWAY_MENU_ITEMS}\n            />\n            <Menu\n                label=\"Breathing\"\n                clickHandler={handleInterventionFormSelection}\n                children={BREATHING_MENU_ITEMS}\n            />\n            <Menu\n                label=\"Circulation\"\n                clickHandler={handleInterventionFormSelection}\n                children={CIRCULATION_MENU_ITEMS}\n            />\n            <Menu\n                label=\"Other Mgmt. Actions\"\n                clickHandler={handleInterventionFormSelection}\n                children={OTHER_MGMT_ACTIONS_MENU_ITEMS}\n            />\n            <Menu\n                label=\"Ongoing Mgmt. Plans\"\n                clickHandler={handleInterventionFormSelection}\n                children={ONGOING_MGMT_PLANS_MENU_ITEMS}\n            />\n            <hr/>\n            {!!currentInterventionForm && <IntvForm data={scenario.interventionForms[currentInterventionForm]} />}\n        </>\n    )\n}\n\nexport default MultipleMenus","import {\n    useContext,\n    useEffect,\n    useState,\n} from \"react\"\n\nimport { ScenarioContext } from \"../contexts/ScenarioContext\"\n\nimport { IntvForm } from \"../components/forms/FormUtils\"\n\nimport {\n    AIRWAY_MENU_ITEMS,\n    BREATHING_MENU_ITEMS,\n    CIRCULATION_MENU_ITEMS,\n    OTHER_MGMT_ACTIONS_MENU_ITEMS,\n    ONGOING_MGMT_PLANS_MENU_ITEMS,\n    Menu\n} from \"../components/Menus\"\n\nconst INTV_CAT_MENU_ITEMS = [\n    {\n        \"id\": \"airway\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Airway\"\n    },\n    {\n        \"id\": \"breathing\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Breathing\"\n    },\n    {\n        \"id\": \"circulation\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Circulation\"\n    },\n    {\n        \"id\": \"other-mgmt-actions\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Other Mgmt. Actions\"\n    },\n    {\n        \"id\": \"ongoing-mgmt-plan\",\n        \"type\": \"intervention-form\",\n        \"depth\": \"1\",\n        \"label\": \"Ongoing Mgmt. Plans\"\n    }\n]\n\nconst MenuPair = () => {\n    const {\n        scenario,\n        currentInterventionForm,\n        setCurrentInterventionForm\n    } = useContext(ScenarioContext)\n\n    const [currIntvCategory, setCurrIntvCategory] = useState(null)\n\n    const handleSelectIntvCategory = (event) => {\n        setCurrentInterventionForm(null)\n        const category = event.target.id\n        switch(category) {\n            case \"airway\":\n            case \"breathing\":\n            case \"circulation\":\n            case \"other-mgmt-actions\":\n            case \"ongoing-mgmt-plan\":\n                setCurrIntvCategory(category)\n                break\n            default:\n                console.error(`unknown intervention category: ${category}`)\n                setCurrIntvCategory(null)\n        }\n    }\n\n    const handleSelectIntv = (event) => {\n        event.preventDefault()\n        console.log(event.target.id)\n        setCurrentInterventionForm(event.target.id)\n    }\n\n    // set current intervention form to null on initial render\n    useEffect(\n        () => { setCurrentInterventionForm(null) },\n        //eslint-disable-next-line\n        []\n    )\n\n    const getIntvMenu = () => {\n        switch(currIntvCategory) {\n            case \"airway\":\n                return (\n                    <Menu\n                        label=\"Airway\"\n                        clickHandler={handleSelectIntv}\n                        children={AIRWAY_MENU_ITEMS}\n                    />\n                )\n            case \"breathing\":\n                return (\n                    <Menu\n                        label=\"Breathing\"\n                        clickHandler={handleSelectIntv}\n                        children={BREATHING_MENU_ITEMS}\n                    />\n                )\n            case \"circulation\":\n                return (\n                    <Menu\n                        label=\"Circulation\"\n                        clickHandler={handleSelectIntv}\n                        children={CIRCULATION_MENU_ITEMS}\n                    />\n                )\n            case \"other-mgmt-actions\":\n                return (\n                    <Menu\n                        label=\"Other Mgmt. Actions\"\n                        clickHandler={handleSelectIntv}\n                        children={OTHER_MGMT_ACTIONS_MENU_ITEMS}\n                    />\n                )\n            case \"ongoing-mgmg-plans\":\n                return (\n                    <Menu\n                        label=\"Ongoing Mgmt Plans\"\n                        clickHandler={handleSelectIntv}\n                        children={ONGOING_MGMT_PLANS_MENU_ITEMS}\n                    />\n                )\n            default:\n                return (<span></span>)\n        }\n    }\n\n    return (\n        <>\n            <Menu\n                label=\"Intervention Category\"\n                clickHandler={handleSelectIntvCategory}\n                children={INTV_CAT_MENU_ITEMS}\n            />\n            {!!currIntvCategory && getIntvMenu()}\n            <hr />\n            {!!currentInterventionForm && <IntvForm data={scenario.interventionForms[currentInterventionForm]} />}\n        </>\n    )\n}\n\nexport default MenuPair","import React, {useState} from 'react';\nimport './App.css';\n\nimport {HashRouter as Router, Switch, Route, Link} from \"react-router-dom\"\n\n// import { Button } from 'reactstrap';\n\nimport { ScenarioProvider } from \"./contexts/ScenarioContext\"\nimport scenarioData from \"./data/strawMan.json\"\n\nimport ProofOfConcept from './routes/ProofOfConcept';\nimport MultipleMenus from './routes/MultipleMenus';\nimport MenuPair from './routes/MenuPair';\n\nfunction App() {\n  console.log(scenarioData)\n\n  const getDefaultValues = (scen) => {\n    return {\n      // vitals: scen.initialVitalSigns,\n      // vitalsRecomputed: false,\n      // currentNode: null,\n      checkListItems: {}, //mapChildObjKeysToFalse(scen.items),\n      // criticalCriteria: {}, //mapArrayOfObjKeysToFalse(scen.criticalCriteria),\n      showForm: {}, //mapKeysToFalse(scen.interventionForms)\n    }\n  }\n  // eslint-disable-next-line\n  const [defaultValues, _unused] = useState(getDefaultValues(scenarioData))\n\n  return (\n    <>\n      <ScenarioProvider scenario={scenarioData} defaultValues={defaultValues} >\n        <Router>\n          <Link to=\"/\" className=\"btn btn-info\">Proof of Concept</Link>\n          <Link to=\"/multi-menu\" className=\"btn btn-primary\">Multi-Menu</Link>\n          <Link to=\"/menu-pair\" className=\"btn btn-success\">Menu-Pair</Link>\n          <hr />\n          <h5>Screen width narrowed to approximate width of Interventions Tab</h5>\n          <hr />\n\n          <Switch>\n            <Route exact path=\"/\" component={ProofOfConcept} />\n            <Route exact path=\"/multi-menu\" component={MultipleMenus} />\n            <Route exact path=\"/menu-pair\" component={MenuPair} />\n          </Switch>\n        </Router>\n      </ScenarioProvider>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}